# Default values for c3nav.
# This is a YAML-formatted file.

# common paramters

# Kubernetes Cluster Domain
clusterDomain: cluster.local


# c3nav settings to generate a c3nav.cfg file from.
# Most of the following settings will be ignored if c3navConfig or existingC3navConfigMap is set.
c3nav:
  # instance name (defaults to .Release.Name)
  name: ""

  # enable debug mode
  debug: false
  loglevel: info

  # tile rendering
  render_scale: "20.0"
  image_renderer: svg
  svg_renderer: rsvg
  cache_tiles: "{{ printf '%' (not .Values.c3nav.debug )}}"
  cache_resolution: "4"
  
  # artwork
  header_logo: ""
  favicon: ""
  favicon_package: ""

  # colors
  primary_color: "#00bb31"
  header_background_color: "#000000"
  header_text_color: "#ffffff"
  header_text_hover_color: "#eeeeee"
  msapplication_tile_color: "#da532c"
  safari_mask_icon_color: "{{ .Values.c3nav.primary_color }}"

  # imprint
  # imprint_address
  # imprint_patrons
  # imprint_team
  # imprint_hosting

  # initial map settings
  # initial_level
  # initial_bounds

  # map grid
  # grid_rows
  # grid_cols

  # tileserver hostname
  tile_cache_server: ""

  # session cookie domain. (Can be left untouched in most situations)
  session_cookie_domain: ""
  # tile access cookie domain. (Can be left untouched if no tileserver CDN is used)
  tile_access_cookie_domain: ""

  # WiFi SSIDs to use for WiFi based location
  wifi_ssids: []

  # allow user registration
  user_registration: false

  # proj4 projection config for converting GPS coordinates to the event space
  crs_proj4: ""

  # database config section
  # will be populated from
  database:
    backend: postgresql
    # database name, defaults to c3nav-{{ .Release.Name }} if empty
    name: ""
    # database user, defaults to c3nav-{{ .Release.Name }} if empty
    user: ""
    # database password, will be autogenerated if empty and bundeled postgres is used. Must be provided otherwise.
    password: ""
    # database host, will be autopopulated if empty and bundeled postgres is used. Must be provided otherwise.
    host: ""
    # databse port
    port: "5432"

  urls:
    # The Django STATIC_URL config value. Defaults to /static
    static: /static

  # djanago settings
  django:
    # django allowed hosts. defaults to domains setting + in-cluster address
    hosts: []
  
  # locale settings
  locale:
    # default locale
    default: en
    # backend timezone
    timezone: UTC
  
  # e-mail settings
  mail:
    from: ""
    host: "localhost"
    port: "25"
    user: ""
    password: ""
    tls: false
    ssl: false
    admins: ""
  
  # memcached
  memcached:
    # memcached connection string. Will be autopopulated based on memcached settings if left empty
    location: ""

  # redis cache
  redis:
    # redis connection string. Will be autopopulated based on redis settings if left empty
    location: ""

  # celery settings
  celery:
    # celery broker url. Will be autopopulated based on rabbitmq settings if left empty
    broker: 
    # celery backend url. Will be autopopulated based on redis settings if left empty
    backend:

# user provided c3nav config to use instead of generating one from the cofigured values
c3navConfig: ""
# use an existing secret for the c3nav config
existingC3navConfigSecret: ""
overrideC3navConfigSecretName: ""
overrideC3navConfigSecretKey: ""

# override the default c3nav config file path
c3navConfigPathOverride: ""

# The domains used for this c3nav instance.
# Defaults to {{ .Release.Name }}.c3nav.de if unset
domains: []
# The domains used for the tileservers of this c3nav instance.
# Defaults to tiles.{{ .Release.Name }}.c3nav.de if unset
tileserverDomains: []



image:
  # The registry to pull c3nav conatiners from
  registry: ghcr.io
  # The repository of the core container
  coreRepository: c3nav/c3nav
  # Optional override for the tiles pods. By default the same repository as for the core is used.
  tilesRepository: ""
  # Optional override for the workers pods. By default the same repository as for the core is used.
  workersRepository: ""
  # The repository of the tileserver container
  tileserverRepository: c3nav/c3nav-tileserver
  # Overrides the image tag whose default is the chart appVersion.
  tag: ""
  pullPolicy: IfNotPresent
  pullSecrets: []
nameOverride: ""
fullnameOverride: ""

# c3nav core service
core:
  uwsgiWorkers: 8

  extraEnv: []

  podExtraAnnotations: {}

  podSecurityContext: {}
    # fsGroup: 2000

  securityContext: {}
    # capabilities:
    #   drop:
    #   - ALL
    # readOnlyRootFilesystem: true
    # runAsNonRoot: true
    # runAsUser: 1000

  service:
    type: ClusterIP
    port: 80
  
  replicaCount: 1

  autoscaling:
    enabled: false
    minReplicas: 1
    maxReplicas: 100
    targetCPUUtilizationPercentage: 80
    # targetMemoryUtilizationPercentage: 80

  resources: {}
    # We usually recommend not to specify default resources and to leave this as a conscious
    # choice for the user. This also increases chances charts run on environments with little
    # resources, such as Minikube. If you do want to specify resources, uncomment the following
    # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
    # limits:
    #   cpu: 100m
    #   memory: 128Mi
    # requests:
    #   cpu: 100m
    #   memory: 128Mi
  
  metrics:
    ## Start a Prometheus exporter sidecar container for the core pod(s)
    enabled: false
    # uWSGI Exporter Prometheus Exporter image
    # ref: https://hub.docker.com/r/timonwong/uwsgi-exporter/tags
    image:
      registry: docker.io
      repository: timonwong/uwsgi-exporter
      tag: v1.3.0
      pullPolicy: IfNotPresent
      pullSecrets: []
    
    extraEnv: []

    securityContext:
      enabled: false
      runAsUser: 1001
    
    # Prometheus exporter service parameters
    service:
      # uWSGI Prometheus exporter service port
      port: 9117
      # Annotations for the Prometheus exporter service
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "{{ .Values.core.metrics.service.port }}"
    
    # uWSGI Prometheus exporter resource requests and limits
    resources:
      ## Example:
      ## limits:
      ##    cpu: 100m
      ##    memory: 128Mi
      limits: {}
      ## Examples:
      ## requests:
      ##    cpu: 100m
      ##    memory: 128Mi
      requests: {}

  nodeSelector: {}

  tolerations: []

  affinity: {}


# c3nav task worker service
workers:
  extraEnv: []

  podExtraAnnotations: {}

  podSecurityContext: {}
    # fsGroup: 2000

  securityContext: {}
    # capabilities:
    #   drop:
    #   - ALL
    # readOnlyRootFilesystem: true
    # runAsNonRoot: true
    # runAsUser: 1000

  replicaCount: 1

  autoscaling:
    enabled: false
    minReplicas: 1
    maxReplicas: 100
    targetCPUUtilizationPercentage: 80
    # targetMemoryUtilizationPercentage: 80

  resources: {}
    # We usually recommend not to specify default resources and to leave this as a conscious
    # choice for the user. This also increases chances charts run on environments with little
    # resources, such as Minikube. If you do want to specify resources, uncomment the following
    # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
    # limits:
    #   cpu: 100m
    #   memory: 128Mi
    # requests:
    #   cpu: 100m
    #   memory: 128Mi

  nodeSelector: {}

  tolerations: []

  affinity: {}

# c3nav tile rendering service
tiles:
  # deploy seperate pod(s) for tile rendering. If set to false the core will take care of it.
  enabled: false

  uwsgiWorkers: 8

  extraEnv: []

  podExtraAnnotations: {}

  podSecurityContext: {}
    # fsGroup: 2000

  securityContext: {}
    # capabilities:
    #   drop:
    #   - ALL
    # readOnlyRootFilesystem: true
    # runAsNonRoot: true
    # runAsUser: 1000

  service:
    type: ClusterIP
    port: 80
  
  replicaCount: 1

  autoscaling:
    enabled: false
    minReplicas: 1
    maxReplicas: 100
    targetCPUUtilizationPercentage: 80
    # targetMemoryUtilizationPercentage: 80

  resources: {}
    # We usually recommend not to specify default resources and to leave this as a conscious
    # choice for the user. This also increases chances charts run on environments with little
    # resources, such as Minikube. If you do want to specify resources, uncomment the following
    # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
    # limits:
    #   cpu: 100m
    #   memory: 128Mi
    # requests:
    #   cpu: 100m
    #   memory: 128Mi
  
  metrics:
    ## Start a Prometheus exporter sidecar container for the tiles pod(s)
    enabled: false
    # uWSGI Exporter Prometheus Exporter image
    # ref: https://hub.docker.com/r/timonwong/uwsgi-exporter/tags
    image:
      registry: docker.io
      repository: timonwong/uwsgi-exporter
      tag: v1.3.0
      pullPolicy: IfNotPresent
      pullSecrets: []

    extraEnv: []

    securityContext:
      enabled: false
      runAsUser: 1001
    
    # Prometheus exporter service parameters
    service:
      # uWSGI Prometheus exporter service port
      port: 9117
      # Annotations for the Prometheus exporter service
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "{{ .Values.tiles.metrics.service.port }}"
    
    # uWSGI Prometheus exporter resource requests and limits
    resources:
      ## Example:
      ## limits:
      ##    cpu: 100m
      ##    memory: 128Mi
      limits: {}
      ## Examples:
      ## requests:
      ##    cpu: 100m
      ##    memory: 128Mi
      requests: {}

  nodeSelector: {}

  tolerations: []

  affinity: {}


# c3nav static files service
static:
  # deploy seperate pod(s) for serving static files. If set to false the core will take care of it.
  enabled: false

  image:
    registry: docker.io
    repository: bitnami/nginx
    tag: 1.25.1-debian-11-r10
    pullPolicy: IfNotPresent
    pullSecrets: []

  extraEnv: []

  podExtraAnnotations: {}

  podSecurityContext: {}
    # fsGroup: 2000

  securityContext: {}
    # capabilities:
    #   drop:
    #   - ALL
    # readOnlyRootFilesystem: true
    # runAsNonRoot: true
    # runAsUser: 1000

  service:
    type: ClusterIP
    port: 80
  
  replicaCount: 1

  autoscaling:
    enabled: false
    minReplicas: 1
    maxReplicas: 100
    targetCPUUtilizationPercentage: 80
    # targetMemoryUtilizationPercentage: 80

  resources: {}
    # We usually recommend not to specify default resources and to leave this as a conscious
    # choice for the user. This also increases chances charts run on environments with little
    # resources, such as Minikube. If you do want to specify resources, uncomment the following
    # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
    # limits:
    #   cpu: 100m
    #   memory: 128Mi
    # requests:
    #   cpu: 100m
    #   memory: 128Mi

  metrics:
    ## Start a Prometheus exporter sidecar container for the static files nginx
    enabled: false
    # NGINX Container Status Port scraped by Prometheus Exporter
    #  Defaults to specified http port
    port: ""
    # Bitnami NGINX Prometheus Exporter image
    # ref: https://hub.docker.com/r/bitnami/nginx-exporter/tags/
    image:
      registry: docker.io
      repository: bitnami/nginx-exporter
      tag: 0.11.0-debian-11-r100
      digest: ""
      pullPolicy: IfNotPresent
      pullSecrets: []

    extraEnv: []

    securityContext:
      enabled: false
      runAsUser: 1001
    
    # Prometheus exporter service parameters
    service:
      # NGINX Prometheus exporter service port
      port: 9113
      # Annotations for the Prometheus exporter service
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "{{ .Values.static.metrics.service.port }}"
    
    # NGINX Prometheus exporter resource requests and limits
    resources:
      ## Example:
      ## limits:
      ##    cpu: 100m
      ##    memory: 128Mi
      limits: {}
      ## Examples:
      ## requests:
      ##    cpu: 100m
      ##    memory: 128Mi
      requests: {}

  nodeSelector: {}

  tolerations: []

  affinity: {}


ingress:
  enabled: false
  className: ""
  annotations: {}
  # ingress hosts. Defaults to domains value if unset.
  hosts: []
  # enable tls.
  tls: true
  # custom tls config. If left empty a default config will automatically be created based on the domains setting.
  tlsConfig: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local
  # protect the ingress with http basic auth. Disabled if empty.
  # only works if className is set to traefik at the moment.
  basicAuth: {}
  #  someuser: "apr1 encrypted password hash"
  #  otheruser: "apr1 encrypted password hash"
  # alternativly an existing secret for http basic auth can be provided
  existingBasicAuthSecret: ""
  # override the name for the created basic auth secret
  basicAuthSecretNameOverride: ""
  # override the name of the basice auth middleware
  basicAuthMiddlewareNameOverride: ""


serviceAccount:
  # Specifies whether a service account should be created
  create: false
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""